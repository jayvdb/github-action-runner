name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'Formula/**'

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v${{ env.version }}")
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Release v${{ env.version }} already exists. Exiting."
            exit 1
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust:
          - stable
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ inputs.cache-key }}

      - name: Build
        run: cargo build --release --bin gar --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/gar${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Rename files
        run: |
          mv x86_64-unknown-linux-gnu/gar gar-x86_64-unknown-linux-gnu
          mv x86_64-apple-darwin/gar gar-x86_64-apple-darwin
          mv x86_64-pc-windows-msvc/gar.exe gar-x86_64-pc-windows-msvc.exe

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            gar-x86_64-unknown-linux-gnu
            gar-x86_64-apple-darwin
            gar-x86_64-pc-windows-msvc.exe
            LICENSE
            VERSION

  homebrew:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV
      - name: Calculate SHA256
        id: sha
        run: |
          curl -LO "https://github.com/s00d/github-action-runner/archive/refs/tags/v${{ env.version }}.tar.gz"
          echo "::set-output name=sha::$(shasum -a 256 v${{ env.version }}.tar.gz | cut -d ' ' -f 1)"
      - name: Create Homebrew formula
        run: |
          cat << EOF > Formula/github-action-runner.rb
          class GithubActionRunner < Formula
            desc "GitHub Action Runner"
            homepage "https://github.com/s00d/github-action-runner"
            url "https://github.com/s00d/github-action-runner/archive/refs/tags/v${{ env.version }}.tar.gz"
            sha256 "${{ steps.sha.outputs.sha }}"
            license "MIT"

            def install
              if RUBY_PLATFORM.include?("darwin")
                bin.install "gar-x86_64-apple-darwin"
              elsif RUBY_PLATFORM.include?("arm64")
                bin.install "gar-aarch64-apple-darwin"
              else
                onoe "Unsupported architecture: #{RUBY_PLATFORM}"
              end
            end

            test do
              system "#{bin}/gar-x86_64-apple-darwin", "--version"
            end
          end
          EOF
      - name: Commit and push Homebrew formula
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/github-action-runner.rb
          git commit -m "Add Homebrew formula for v${{ env.version }}"
          git push