name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'Formula/**'

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v${{ env.version }}")
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Release v${{ env.version }} already exists. Exiting."
            exit 1
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust:
          - stable
        include:
          - os: ubuntu-latest
            targets: x86_64-unknown-linux-gnu,i686-unknown-linux-gnu,aarch64-unknown-linux-gnu
          - os: windows-latest
            targets: x86_64-pc-windows-msvc,i686-pc-windows-msvc
          - os: macos-latest
            targets: x86_64-apple-darwin,aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.targets }}
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ inputs.cache-key }}

      - name: Install cross
        run: cargo install cross

      - name: Build
        shell: bash
        run: |
          for TARGET in $(echo ${{ matrix.targets }} | tr "," "\n")
          do
            rustup target add $TARGET
            cross build --release --bin gar --target $TARGET
            mv target/$TARGET/release/gar${{ runner.os == 'Windows' && '.exe' || '' }} target/$TARGET/release/gar-$TARGET${{ runner.os == 'Windows' && '.exe' || '' }}
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: gar-${{ matrix.os }}
          path: target/*/*/gar-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Rename and Move files
        shell: bash
        run: |
          for DIR in target/*; do
          if [ -d "$DIR" ]; then
           TARGET=$(basename $DIR)
           EXTENSION=""
           if [[ $TARGET == *"windows"* ]]; then
             EXTENSION=".exe"
           fi
           if [ -f $DIR/release/gar$EXTENSION ]; then
             mv $DIR/release/gar$EXTENSION gar-$TARGET$EXTENSION
           fi
          fi
          done

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            gar-*.exe
            gar-*
            LICENSE
            VERSION

  homebrew:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: github-action-runner
          formula-path: Formula/m/github-action-runner.rb
          tag-name: ${{ env.version }}
          download-url: https://example.com/packages/myformula-${{ env.version }}.tar.gz
          commit-message: |
            {{formulaName}} {{env.version}}
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}