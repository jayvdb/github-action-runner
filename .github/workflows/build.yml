name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'Formula/**'

permissions:
  contents: write

env:
  TARGETS: x86_64-unknown-linux-gnu,i686-unknown-linux-gnu,aarch64-unknown-linux-gnu,x86_64-apple-darwin,aarch64-apple-darwin,x86_64-pc-windows-msvc,i686-pc-windows-msvc

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v${{ env.version }}")
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Release v${{ env.version }} already exists. Exiting."
            exit 1
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ env.TARGETS }}
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ inputs.cache-key }}

      - name: Install cross
        run: cargo install cross

      - name: Build
        run: |
          IFS=',' read -ra TARGET_ARRAY <<< "$TARGETS"
          for target in "${TARGET_ARRAY[@]}"; do
            cross build --release --bin gar --target $target
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/gar${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Rename files
        run: |
          IFS=',' read -ra TARGET_ARRAY <<< "$TARGETS"
          for target in "${TARGET_ARRAY[@]}"; do
            if [[ $target == *"windows"* ]]; then
              mv $target/gar.exe gar-$target.exe
            else
              mv $target/gar gar-$target
            fi
          done

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false
          files: |
            ${{ join(env.TARGETS.split(','), '\n') }}
            LICENSE
            VERSION

  homebrew:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Bump homebrew-core formula
        uses: mislav/bump-homebrew-formula-action@v2
        if: "matrix.os == 'macos-latest' && !contains(github.ref, '-')" # skip prereleases
        env:
          COMMITTER_TOKEN: ${{ secrets.BREW_TOKEN }}
        with:
          formula-name: github-action-runner
          # https://github.com/mislav/bump-homebrew-formula-action/issues/58
          formula-path: Formula/g/github-action-runner.rb

      - uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: github-action-runner
          formula-path: Formula/m/github-action-runner.rb
          tag-name: ${{ env.version }}
          download-url: https://example.com/packages/myformula-${{ env.version }}.tar.gz
          commit-message: |
            {{formulaName}} {{env.version}}
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}