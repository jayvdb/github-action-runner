name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Check if release exists
        id: check_release
        run: |
          RESPONSE_CODE=$(curl --write-out "%{http_code}" --silent --output /dev/null "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v${{ env.version }}")
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Release v${{ env.version }} already exists. Exiting."
            exit 1
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust:
          - stable
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ inputs.cache-key }}

      - name: Build
        run: cargo build --release --bin gar --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/gar${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./x86_64-unknown-linux-gnu/gar
          asset_name: gar-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./x86_64-apple-darwin/gar
          asset_name: gar-x86_64-apple-darwin
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./x86_64-pc-windows-msvc/gar.exe
          asset_name: gar-x86_64-pc-windows-msvc.exe
          asset_content_type: application/octet-stream

  homebrew:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Read version
        id: version
        run: echo "version=$(cat version)" >> $GITHUB_ENV
      - name: Install Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
          bundler-cache: true
      - name: Install Octokit
        run: gem install octokit
      - name: Update Homebrew formula
        run: |
          require 'octokit'
          client = Octokit::Client.new(access_token: "${{ secrets.GITHUB_TOKEN }}")
          repo = "s00d/github-action-runner"
          formula_path = "Formula/github-action-runner.rb"
          url = "https://github.com/s00d/github-action-runner/archive/refs/tags/#{ env.version }.tar.gz"
          sha256 = `curl -L -s #{url} | sha256sum | cut -d' ' -f1`.strip
          formula = client.contents(repo, path: formula_path)
          updated_formula = Base64.decode64(formula.content).gsub(/url ".+?"/, "url \"#{url}\"").gsub(/sha256 ".+?"/, "sha256 \"#{sha256}\"")
          client.update_contents(
            repo,
            formula_path,
            "Update #{formula_path} to #{env.version}",
            formula.sha,
            updated_formula
          )